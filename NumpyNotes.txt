#Numpy Module
---------------------------------
NumPy is a Python library used for working with arrays.
In Python we have lists that serve the purpose of arrays, but they are slow to process.
NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.
The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.
Arrays are very frequently used in data science, where speed and resources are very important.

NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.
This behavior is called locality of reference in computer science.


import numpy
arr = numpy.array([1, 2, 3, 4, 5])
print(arr)





0-D Arrays
---------------------------------
import numpy as np
arr = np.array(42)
print(arr)

1-D Arrays
---------------------------------
import numpy as np
arr = np.array([1, 2, 3, 4, 5])
print(arr)


2-D Arrays
---------------------------------
import numpy as np
arr = np.array([[1, 2, 3], [4, 5, 6]])
print(arr)




3-D Arrays
---------------------------------
import numpy as np
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
print(arr)


n-D Arrays
---------------------------------
import numpy as np
arr = np.array([1, 2, 3, 4], ndmin=5)
print(arr)
print('number of dimensions :', arr.ndim)



#Numpy Datatypes
---------------------------------
i - integer
b - boolean
u - unsigned integer
f - float
c - complex float
m - timedelta
M - datetime
O - object
S - string
U - unicode string
V - fixed chunk of memory for other type ( void )


NumPy Arrays provides the ndim attribute that returns an integer that tells us how many dimensions the array have.
The NumPy array object has a property called dtype that returns the data type of the array

import numpy as np
arr = np.array([1, 2, 3, 4])
print(arr.dtype)

Creating Arrays With a Defined Data Type:
import numpy as np
arr = np.array([1, 2, 3, 4], dtype='S')
print(arr)
print(arr.dtype)


Converting Data Type on Existing Arrays:
import numpy as np
arr = np.array([1.1, 2.1, 3.1])
newarr = arr.astype('i')
print(newarr)
print(newarr.dtype)








#NumPy Array Copy vs View
---------------------------------
The main difference between a copy and a view of an array is that the copy is a new array, and the view is just a view of the original array.

x = arr.copy()
x = arr.view()






#Get the Shape of an Array
---------------------------------
NumPy arrays have an attribute called shape that returns a tuple with each index having the number of corresponding elements.

import numpy as np
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
print(arr.shape)

OUTPUT - (2, 4)



#Reshaping arrays
---------------------------------
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
newarr = arr.reshape(4, 3)
print(newarr)


#Reshape From 1-D to 2-D
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
newarr = arr.reshape(4, 3)
print(newarr)


#Reshape From 1-D to 3-D
arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])
newarr = arr.reshape(2, 3, 2)
print(newarr)


#Unknown Dimension
Meaning that you do not have to specify an exact number for one of the dimensions in the reshape method.
Pass -1 as the value, and NumPy will calculate this number for you.

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8])
newarr = arr.reshape(2, 2, -1)
print(newarr)



#Flattening the arrays
Flattening array means converting a multidimensional array into a 1D array.
arr = np.array([[1, 2, 3], [4, 5, 6]])
newarr = arr.reshape(-1)
print(newarr)



#Iterating 3D Array
---------------------------------
import numpy as np
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
for x in arr:
  for y in x:
    for z in y:
      print(z)


#Enumerated Iteration Using ndenumerate()
Enumeration means mentioning sequence number of somethings one by one.
Sometimes we require corresponding index of the element while iterating, the ndenumerate() method can be used for those usecases.

import numpy as np
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
for idx, x in np.ndenumerate(arr):
  print(idx, x)

OUTPUT :
(0, 0) 1
(0, 1) 2
(0, 2) 3
(0, 3) 4
(1, 0) 5
(1, 1) 6
(1, 2) 7
(1, 3) 8



#Joining NumPy Arrays
---------------------------------
import numpy as np
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.concatenate((arr1, arr2))
print(arr)


We pass a sequence of arrays that we want to join to the concatenate() function, along with the axis. If axis is not explicitly passed, it is taken as 0.
0 - Along Coloumn
1 - Along Rows

import numpy as np
arr1 = np.array([[1, 2], [3, 4]])
arr2 = np.array([[5, 6], [7, 8]])
arr = np.concatenate((arr1, arr2), axis=1)
print(arr)

OUTPUT:
[[1 2 5 6]
 [3 4 7 8]]

If axis is 0:
OUTPUT:
[[1 2]
 [3 4]
 [5 6]
 [7 8]]



#Joining Arrays Using Stack Functions
---------------------------------

#NumPy provides a helper function: hstack() to stack along rows.
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.hstack((arr1, arr2))
print(arr)

OUTPUT:
[1 2 3 4 5 6]



#NumPy provides a helper function: vstack()  to stack along columns.
import numpy as np
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.vstack((arr1, arr2))
print(arr)

OUTPUT:
[[1 2 3]
 [4 5 6]]

#NumPy provides a helper function: dstack() to stack along height, which is the same as depth.
import numpy as np
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
arr = np.dstack((arr1, arr2))
print(arr)

OUTPUT:
[[[1 4]
  [2 5]
  [3 6]]]







#NumPy Splitting Array
---------------------------------
We use array_split() for splitting arrays, we pass it the array we want to split and the number of splits.
arr = np.array([1, 2, 3, 4, 5, 6])
newarr = np.array_split(arr, 3)
print(newarr)

OUTPUT :[array([1, 2]), array([3, 4]), array([5, 6])]

If the array has less elements than required, it will adjust from the end accordingly.






#NumPy Searching Arrays
---------------------------------
To search an array, use the where() method.

import numpy as np
arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(arr == 4)
print(x)


The example above will return a tuple: (array([3, 5, 6],)
Which means that the value 4 is present at index 3, 5, and 6.


#There is a method called searchsorted() which performs a binary search in the array, and returns the index where the specified value would be inserted to maintain the search order.

import numpy as np
arr = np.array([1, 3, 5, 7])
x = np.searchsorted(arr, [2, 4, 6])
print(x)

OUTPUT:
[1 2 3]






#NumPy Filter Array
---------------------------------
Getting some elements out of an existing array and creating a new array out of them is called filtering.
If the value at an index is True that element is contained in the filtered array, if the value at that index is False that element is excluded from the filtered array.

import numpy as np
arr = np.array([41, 42, 43, 44])
x = [True, False, True, False]
newarr = arr[x]
print(newarr)

OUTPUT : [41 43]






#NumPy ufuncs
---------------------------------
ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements.
They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.
ufuncs also take additional arguments, like:

where - boolean array or condition defining where the operations should take place.
dtype - defining the return type of elements.
out - output array where the return value should be copied.


#What is Vectorization?
---------------------------------
Converting iterative statements into a vector based operation is called vectorization.
It is faster as modern CPUs are optimized for such operations.


Add the Elements of Two Lists
list 1: [1, 2, 3, 4]
list 2: [4, 5, 6, 7]
One way of doing it is to iterate over both of the lists and then sum each elements.

Without ufunc, we can use Python's built-in zip() method:
x = [1, 2, 3, 4]
y = [4, 5, 6, 7]
z = []
for i, j in zip(x, y):
  z.append(i + j)
print(z)

With ufunc, we can use the add() function:

import numpy as np
x = [1, 2, 3, 4]
y = [4, 5, 6, 7]
z = np.add(x, y)
print(z)



#Create Your Own ufunc
---------------------------------
To create your own ufunc, you have to define a function, like you do with normal functions in Python, then you add it to your NumPy ufunc library with the frompyfunc() method.
The frompyfunc() method takes the following arguments:

function - the name of the function.
inputs - the number of input arguments (arrays).
outputs - the number of output arrays.

import numpy as np
def myadd(x, y):
  return x+y

myadd = np.frompyfunc(myadd, 2, 1)
print(myadd([1, 2, 3, 4], [5, 6, 7, 8]))


#Check if a Function is a ufunc
---------------------------------
Check the type of a function to check if it is a ufunc or not.
A ufunc should return <class 'numpy.ufunc'>.




#Simple Arithmetic
---------------------------------
The add() function sums the content of two arrays, and return the results in a new array.

The subtract() function subtracts the values from one array with the values from another array, and return the results in a new array.

The multiply() function multiplies the values from one array with the values from another array, and return the results in a new array.

The divide() function divides the values from one array with the values from another array, and return the results in a new array.

The power() function rises the values from the first array to the power of the values of the second array, and return the results in a new array.

Both the mod() and the remainder() functions return the remainder of the values in the first array corresponding to the values in the second array, and return the results in a new array.

The divmod() function return both the quotient and the mod. The return value is two arrays, the first array contains the quotient and second array contains the mod.

Both the absolute() and the abs() functions do the same absolute operation element-wise but we should use absolute() to avoid confusion with python's inbuilt math.abs()

TRemove the decimals, and return the float number closest to zero. Use the trunc() and fix() functions.

The around() function increments preceding digit or decimal by 1 if >=5 else do nothing.

The floor() function rounds off decimal to nearest lower integer.

The ceil() function rounds off decimal to nearest upper integer.

Use the log2() function to perform log at the base 2.

Use the log10() function to perform log at the base 10.

Use the log() function to perform log at the base e.

NumPy does not provide any function to take log at any base, so we can use the frompyfunc() function along with inbuilt function math.log() with two input parameters and one output parameter:



#NumPy Summations
-----------------------------------
Addition is done between two arguments whereas summation happens over n elements.

1. Summation Over an Axis
If you specify axis=1, NumPy will sum the numbers in each array.

import numpy as np
arr1 = np.array([1, 2, 3])
arr2 = np.array([1, 2, 3])
newarr = np.sum([arr1, arr2], axis=1)
print(newarr)

OUTPUT - [6 6]

2. Summation Over an Axis
If you specify axis=1
import numpy as np
arr1 = np.array([1, 2, 3])
arr2 = np.array([1, 2, 3])
newarr = np.sum([arr1, arr2], axis=1)
print(newarr)

OUTPUT - [2 4 6]



3. Cummulative Sum
Cummulative sum means partially adding the elements in array.

import numpy as np
arr = np.array([1, 2, 3])
newarr = np.cumsum(arr)
print(newarr)

OUTPUT - [1 3 6]



#NumPy Products
-----------------------------------
To find the product of the elements in an array, use the prod() function.
If you specify axis=1, NumPy will return the product of each array.

Cummulative Product
Cummulative product means taking the product partially.
E.g. The partial product of [1, 2, 3, 4] is [1, 1*2, 1*2*3, 1*2*3*4] = [1, 2, 6, 24]
Perfom partial sum with the cumprod() function.



#NumPy Differences
-----------------------------------
A discrete difference means subtracting two successive elements.

E.g. for [1, 2, 3, 4], the discrete difference would be [2-1, 3-2, 4-3] = [1, 1, 1]
To find the discrete difference, use the diff() function.


#NumPy LCM Lowest Common Multiple
-----------------------------------
import numpy as np
num1 = 4
num2 = 6
x = np.lcm(num1, num2)
print(x)

Find the LCM of the values of the following array:
import numpy as np
arr = np.array([3, 6, 9])
x = np.lcm.reduce(arr)
print(x)

Find the LCM of all values of an array where the array contains all integers from 1 to 10:
import numpy as np
arr = np.arange(1, 11)
x = np.lcm.reduce(arr)
print(x)



#NumPy GCD Greatest Common Devisor
-----------------------------------
import numpy as np
num1 = 6
num2 = 9
x = np.gcd(num1, num2)
print(x)

Find the GCD for all of the numbers in the following array:
import numpy as np
arr = np.array([20, 8, 32, 36, 16])
x = np.gcd.reduce(arr)
print(x)




#NumPy Trigonometric Functions
-----------------------------------
NumPy provides the ufuncs sin(), cos() and tan() that take values in radians and produce the corresponding sin, cos and tan values.

Hyperbolic Functions:
NumPy provides the ufuncs sinh(), cosh() and tanh() that take values in radians and produce the corresponding sinh, cosh and tanh values..



#NumPy Set Operations
-----------------------------------
We can use NumPy's unique() method to find unique elements from any array. E.g. create a set array, but remember that the set arrays should only be 1-D arrays.

To find the unique values of two arrays, use the union1d() method.

To find only the values that are present in both arrays, use the intersect1d() method.

To find only the values in the first set that is NOT present in the seconds set, use the setdiff1d() method.

Note: the intersect1d() method takes an optional argument assume_unique, which if set to True can speed up computation. It should always be set to True when dealing with sets.

To find only the values in the first set that is NOT present in the seconds set, use the setdiff1d() method.

To find only the values that are NOT present in BOTH sets, use the setxor1d() method.

Note: the setxor1d() method takes an optional argument assume_unique, which if set to True can speed up computation. It should always be set to True when dealing with sets.





