#Python Basic
---------------------------------

#Python allows you to assign values to multiple variables in one line:
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

#And you can assign the same value to multiple variables in one line:
x = y = z = "Orange"
print(x)
print(y)
print(z)

#All Data Types
x = "Hello World" ->	str
x = 20	->  int
x = 20.5  -> 	float
x = 1j -> 	complex
x = ["apple", "banana", "cherry"]	->  list
x = ("apple", "banana", "cherry")	->  tuple
x = range(6) ->  	range
x = {"name" : "John", "age" : 36} -> 	dict
x = {"apple", "banana", "cherry"}	 -> set
x = frozenset({"apple", "banana", "cherry"}) -> 	frozenset
x = True -> 	bool
x = b"Hello"	->  bytes
x = bytearray(5)	->  bytearray
x = memoryview(bytes(5))	->  memoryview
x = None  ->	NoneType


#Important String Functions
The upper() method returns the string in upper case:
The lower() method returns the string in lower case:
The strip() method removes any whitespace from the beginning or the end:
The replace() method replaces a string with another string:
The split() method returns a list where the text between the specified separator becomes the list items.

More - https://www.w3schools.com/python/python_strings_methods.asp



#Important List Functions
To add an item to the end of the list, use the append() method:
To insert a list item at a specified index, use the insert() method.
To append elements from another list to the current list, use the extend() method.
The extend() method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.).
The remove() method removes the specified item (If there are more than one item with the specified value, the remove() method removes the first occurrence)
The pop() method removes the specified index (If you do not specify the index, the pop() method removes the last item)
The clear() method empties the list.
List objects have a sort() method that will sort the list alphanumerically, ascending, by default (To sort descending, use the keyword argument reverse = True)
The reverse() method reverses the current sorting order of the elements.
You can use the built-in List method copy() to copy a list.


#Important Tuple Functions
count()	Returns the number of times a specified value occurs in a tuple
index()	Searches the tuple for a specified value and returns the position of where it was found


#Important Set Functions
add()	 	Adds an element to the set
clear()	 	Removes all the elements from the set
copy()	 	Returns a copy of the set
difference()     Returns a set containing the difference between two or more sets
difference_update()		Removes the items in this set that are also included in another, specified set
discard()	 	Remove the specified item
intersection()		Returns a set, that is the intersection of two other sets
intersection_update()		Removes the items in this set that are not present in other, specified set(s)
isdisjoint()	 	Returns whether two sets have a intersection or not
issubset()		Returns whether another set contains this set or not
issuperset()		Returns whether this set contains another set or not
pop()	 	Removes an element from the set
remove()	 	Removes the specified element
symmetric_difference()		Returns a set with the symmetric differences of two sets
symmetric_difference_update()		Inserts the symmetric differences from this set and another
union()		Return a set containing the union of sets
update()		Update the set with the union of this set and others



#Important Dictionary Functions
clear()	Removes all the elements from the dictionary
copy()	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	Returns the value of the specified key
items()	Returns a list containing a tuple for each key value pair
keys()	Returns a list containing the dictionary's keys
pop()	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary



#Lamba Function
A lambda function can take any number of arguments, but can only have one expression.
lambda arguments : expression
x = lambda a : a + 10
print(x(5))
Output = 15



#The __init__() Function
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

print(p1.name)
print(p1.age)


#Inheritance Class Polymorphism
What about classes with child classes with the same name? Can we use polymorphism there?

Yes. If we use the example above and make a parent class called Vehicle, and make Car, Boat, Plane child classes of Vehicle, the child classes inherits the Vehicle methods, but can override them:

class Vehicle:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Move!")

class Car(Vehicle):
  pass

class Boat(Vehicle):
  def move(self):
    print("Sail!")

class Plane(Vehicle):
  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang")       #Create a Car object
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat object
plane1 = Plane("Boeing", "747")     #Create a Plane object

for x in (car1, boat1, plane1):
  print(x.brand)
  print(x.model)
  x.move()


OUTPUT :
Ford
Mustang
Move!
Ibiza
Touring 20
Sail!
Boeing
747
Fly!
NOTE : Child classes inherits the properties and methods from the parent class.
In the example above you can see that the Car class is empty, but it inherits brand, model, and move() from Vehicle.
The Boat and Plane classes also inherit brand, model, and move() from Vehicle, but they both override the move() method.
Because of polymorphism we can execute the same method for all classes.






#DateTime Module
import datetime
x = datetime.datetime.now()
OUTPUT FORMAT - 2025-02-17 00:06:10.062086
print(x.year)
print(x.strftime("%A"))
OUTPUT:
2025
Monday
The datetime() class requires three parameters to create a date: year, month, day.
x = datetime.datetime(2018, 6, 1)
print(x)
The method is called strftime(), and takes one parameter, format, to specify the format of the returned string
print(x.strftime("%B"))
OUTPUT:
June

%a	Weekday, short version	-> Wed
%A	Weekday, full version	-> Wednesday
%w	Weekday as a number 0-6, 0 is Sunday	-> 3
%d	Day of month 01-31	-> 31
%b	Month name, short version	-> Dec
%B	Month name, full version	-> December
%m	Month as a number -> 01-12	12
%y	Year, short version, without century	-> 18
%Y	Year, full version	-> 2018
%H	Hour 00-23	-> 17
%I	Hour 00-12	-> 05
%p	AM/PM	-> PM
%M	Minute 00-59	-> 41
%S	Second 00-59	-> 08
%f	Microsecond 000000-999999	-> 548513
%z	UTC offset	-> +0100
%Z	Timezone	-> CST
%j	Day number of year 001-366	-> 365
%U	Week number of year, Sunday as the first day of week, 00-53	-> 52
%W	Week number of year, Monday as the first day of week, 00-53	-> 52
%c	Local version of date and time	Mon Dec 31 17:41:00 -> 2018
%C	Century	-> 20
%x	Local version of date	-> 12/31/18
%X	Local version of time	-> 17:41:00
%%	A % character	-> %
%G	ISO 8601 year	-> 2018
%u	ISO 8601 weekday (1-7)	-> 1
%V	ISO 8601 weeknumber (01-53)	-> 01











#Math Module
The min() and max() functions can be used to find the lowest or highest value in an iterable
The abs() function returns the absolute (positive) value of the specified number
The pow(x, y) function returns the value of x to the power of y (xy)
The math.sqrt() method for example, returns the square root of a number
The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result
The math.pi constant, returns the value of PI (3.14...)






#Python JSON
If you have a JSON string, you can parse it by using the json.loads() method.
If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.






#RegEx Module
A RegEx, or Regular Expression, is a sequence of characters that forms a search pattern.
RegEx can be used to check if a string contains the specified search pattern.
import re
#Check if the string starts with "The" and ends with "Spain":
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)
if x:
  print("YES! We have a match!")
else:
  print("No match")
OUTPUT - YES! We have a match!


Important Functions:
findall()	Returns a list containing all matches
search()	Returns a Match object if there is a match anywhere in the string
split()	Returns a list where the string has been split at each match
sub()	Replaces one or many matches with a string

[]	A set of characters	"[a-m]"
\	Signals a special sequence (can also be used to escape special characters)	"\d"
.	Any character (except newline character)	"he..o"
^	Starts with	"^hello"
$	Ends with	"planet$"
*	Zero or more occurrences	"he.*o"
+	One or more occurrences	"he.+o"
?	Zero or one occurrences	"he.?o"
{}	Exactly the specified number of occurrences	"he.{2}o"
|	Either or	"falls|stays"

\A	Returns a match if the specified characters are at the beginning of the string	"\AThe"
\b	Returns a match where the specified characters are at the beginning or at the end of a word   r"\bain"
\B	Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word  r"\Bain"
\d	Returns a match where the string contains digits (numbers from 0-9)	"\d"
\D	Returns a match where the string DOES NOT contain digits	"\D"
\s	Returns a match where the string contains a white space character	"\s"
\S	Returns a match where the string DOES NOT contain a white space character	"\S"
\w	Returns a match where the string contains any word characters (characters from a to Z, digits from 0-9, and the underscore _ character)	"\w"
\W	Returns a match where the string DOES NOT contain any word characters	"\W"
\Z	Returns a match if the specified characters are at the end of the string	"Spain\Z"

[arn]	Returns a match where one of the specified characters (a, r, or n) is present
[a-n]	Returns a match for any lower case character, alphabetically between a and n
[^arn]	Returns a match for any character EXCEPT a, r, and n
[0123]	Returns a match where any of the specified digits (0, 1, 2, or 3) are present
[0-9]	Returns a match for any digit between 0 and 9
[0-5][0-9]	Returns a match for any two-digit numbers from 00 and 59
[a-zA-Z]	Returns a match for any character alphabetically between a and z, lower case OR upper case
[+]	In sets, +, *, ., |, (), $,{} has no special meaning, so [+] means: return a match for any + character in the string







#Python File Handling
The key function for working with files in Python is the open() function.
The open() function takes two parameters; filename, and mode.
"r" - Read - Default value. Opens a file for reading, error if the file does not exist
"a" - Append - Opens a file for appending, creates the file if it does not exist
"w" - Write - Opens a file for writing, creates the file if it does not exist
"x" - Create - Creates the specified file, returns an error if the file exists
"t" - Text - Default value. Text mode
"b" - Binary - Binary mode (e.g. images)


f = open("demofile3.txt", "w")
f.write("Woops! I have deleted the content!")
f.close()
#open and read the file after the overwriting:
f = open("demofile3.txt", "r")
print(f.read())

To delete a file, you must import the OS module, and run its os.remove() function
To delete an entire folder, use the os.rmdir() method










#More Notes when needed


























